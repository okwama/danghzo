generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model SalesRep {
  id                            Int                             @id @default(autoincrement())
  name                          String
  email                         String
  phoneNumber                   String
  password                      String
  countryId                     Int
  country                       String
  region_id                     Int
  region                        String
  route_id                      Int
  route                         String                          @db.VarChar(100)
  route_id_update               Int
  route_name_update             String                          @db.VarChar(100)
  visits_targets                Int
  new_clients                   Int
  vapes_targets                 Int
  pouches_targets               Int
  role                          String?                         @default("USER")
  manager_type                  Int
  status                        Int?                            @default(0)
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  retail_manager                Int
  key_channel_manager           Int
  distribution_manager          Int
  photoUrl                      String?                         @default("")
  managerId                     Int?
  JourneyPlanss                 JourneyPlanss[]
  LoginHistory                  LoginHistory[]
  UpliftSale                    UpliftSale[]
  distributors_targets          distributors_targets[]
  key_account_targets           key_account_targets[]
  leave_requests                leave_requests[]
  retail_targets                retail_targets[]
  sales_orders                  sales_orders[]
  sales_rep_manager_assignments sales_rep_manager_assignments[]
  sales_rep_managers            sales_rep_managers[]
  targets                       targets[]

  @@index([status, role], map: "idx_status_role")
  @@index([countryId, region_id, route_id], map: "idx_location")
  @@index([managerId], map: "idx_manager")
  @@index([countryId], map: "SalesRep_countryId_fkey")
}

model LoginHistory {
  id           Int       @id @default(autoincrement())
  userId       Int?
  timezone     String?   @default("UTC")
  duration     Int?
  status       Int?      @default(0)
  sessionEnd   String?
  sessionStart String?
  SalesRep     SalesRep? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([userId, status])
  @@index([sessionStart])
  @@index([sessionEnd])
  @@index([userId, sessionStart])
  @@index([status, sessionStart])
}

model Manager {
  id                            Int                             @id @default(autoincrement())
  name                          String                          @db.VarChar(100)
  email                         String?                         @unique(map: "email") @db.VarChar(100)
  phoneNumber                   String                          @db.VarChar(20)
  managerType                   managers_managerType
  managerTypeId                 Int                             @db.TinyInt
  created_at                    DateTime                        @default(now()) @db.Timestamp(0)
  country                       String?                         @db.VarChar(100)
  region_id                     Int
  region                        String?                         @db.VarChar(100)
  sales_rep_manager_assignments sales_rep_manager_assignments[]
  sales_rep_managers            sales_rep_managers[]

  @@map("managers")
}

model Regions {
  id        Int         @id @default(autoincrement())
  name      String
  countryId Int
  status    Int?        @default(0)
  customers customers[]

  @@unique([name, countryId])
  @@index([countryId], map: "Regions_countryId_fkey")
}

model Country {
  id        Int         @id @default(autoincrement())
  name      String
  status    Int?        @default(0)
  customers customers[]
  stores    stores[]
}

model Category {
  id                  Int                   @id @default(autoincrement())
  name                String
  CategoryPriceOption CategoryPriceOption[]
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  category_id   Int
  category      String
  unit_cost     Decimal  @db.Decimal(11, 2)
  description   String?
  currentStock  Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  clientId      Int?
  image         String?  @db.VarChar(255)
  unit_cost_ngn Decimal? @db.Decimal(11, 2)
  unit_cost_tzs Decimal? @db.Decimal(11, 2)

  @@index([clientId], map: "Product_clientId_fkey")
}

model Clients {
  id                Int             @id @default(autoincrement())
  name              String
  address           String?
  latitude          Float?
  longitude         Float?
  balance           Decimal?        @db.Decimal(11, 2)
  email             String?
  region_id         Int
  region            String
  route_id          Int?
  route_name        String?
  route_id_update   Int?
  route_name_update String?         @db.VarChar(100)
  contact           String
  tax_pin           String?
  location          String?
  status            Int             @default(0)
  client_type       Int?
  outlet_account    Int?
  countryId         Int
  added_by          Int?
  created_at        DateTime?       @default(now())
  JourneyPlanss     JourneyPlanss[]
  UpliftSale        UpliftSale[]
  client_ledger     client_ledger[]
  receipts          receipts[]
  sales_orders      sales_orders[]

  @@index([countryId], map: "Clients_countryId_fkey")
  @@index([countryId, status, route_id])
}

model Riders {
  id            Int     @id @default(autoincrement())
  name          String
  contact       String
  id_number     String
  company_id    Int
  company       String
  status        Int?
  password      String?
  device_id     String?
  device_name   String?
  device_status String?
  token         String?
}

model JourneyPlan {
  id                 Int       @id @default(autoincrement())
  date               DateTime
  time               String
  userId             Int?
  clientId           Int
  status             Int       @default(0)
  checkInTime        DateTime?
  latitude           Float?
  longitude          Float?
  imageUrl           String?
  notes              String?
  checkoutLatitude   Float?
  checkoutLongitude  Float?
  checkoutTime       DateTime?
  showUpdateLocation Boolean   @default(true)
  routeId            Int?

  @@index([routeId], map: "JourneyPlan_routeId_fkey")
}

model NoticeBoard {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  countryId Int?
}

model FeedbackReport {
  reportId  Int      @unique
  comment   String?
  createdAt DateTime @default(now())
  clientId  Int
  id        Int      @id @default(autoincrement())
  userId    Int

  @@index([userId])
  @@index([clientId])
  @@index([reportId])
}

model ProductReport {
  reportId    Int
  productName String?
  quantity    Int?
  comment     String?
  createdAt   DateTime @default(now())
  clientId    Int
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int?

  @@index([userId])
  @@index([clientId])
  @@index([reportId])
}

model VisibilityReport {
  reportId  Int      @unique
  comment   String?
  imageUrl  String?
  createdAt DateTime @default(now())
  clientId  Int
  id        Int      @id @default(autoincrement())
  userId    Int

  @@index([userId])
  @@index([clientId])
  @@index([reportId])
}

model Leave {
  id         Int      @id @default(autoincrement())
  userId     Int
  leaveType  String
  startDate  DateTime
  endDate    DateTime
  reason     String
  attachment String?
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId], map: "leaves_userId_fkey")
  @@map("leaves")
}

model users {
  id                     Int                      @id @default(autoincrement())
  username               String                   @unique(map: "username") @db.VarChar(50)
  email                  String                   @unique(map: "email") @db.VarChar(100)
  password_hash          String                   @db.VarChar(255)
  full_name              String                   @db.VarChar(100)
  role                   users_role?              @default(user)
  is_active              Boolean?                 @default(true)
  created_at             DateTime                 @default(now()) @db.Timestamp(0)
  updated_at             DateTime                 @default(now()) @db.Timestamp(0)
  avatar_url             String                   @db.VarChar(255)
  inventory_receipts     inventory_receipts[]
  inventory_transactions inventory_transactions[]
  inventory_transfers    inventory_transfers[]
  journal_entries        journal_entries[]
  leave_requests         leave_requests[]
  my_receipts            my_receipts[]
  payments               payments[]
  purchase_orders        purchase_orders[]
  receipts               receipts[]
  sales_orders           sales_orders[]
  stock_takes            stock_takes[]
}

model routes {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(100)
  region       Int
  region_name  String      @db.VarChar(100)
  country_id   Int
  country_name String      @db.VarChar(100)
  leader_id    Int
  leader_name  String      @db.VarChar(100)
  status       Int
  customers    customers[]
}

model departments {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)
}

model account_category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(20)
}

model payments {
  id                Int                     @id @default(autoincrement())
  payment_number    String                  @unique(map: "payment_number") @db.VarChar(20)
  supplier_id       Int
  purchase_order_id Int?
  payment_date      DateTime                @db.Date
  payment_method    payments_payment_method
  reference_number  String?                 @db.VarChar(50)
  amount            Decimal                 @db.Decimal(15, 2)
  notes             String?                 @db.Text
  created_by        Int
  created_at        DateTime                @default(now()) @db.Timestamp(0)
  updated_at        DateTime                @default(now()) @db.Timestamp(0)
  account_id        Int?
  reference         String?                 @db.VarChar(100)
  status            payments_status?        @default(in_pay)
  purchase_orders   purchase_orders?        @relation(fields: [purchase_order_id], references: [id], onUpdate: Restrict, map: "fk_payments_purchase_order")
  suppliers         suppliers               @relation(fields: [supplier_id], references: [id], onUpdate: Restrict, map: "payments_ibfk_1")
  users             users                   @relation(fields: [created_by], references: [id], onUpdate: Restrict, map: "payments_ibfk_2")

  @@index([created_by], map: "created_by")
  @@index([purchase_order_id], map: "fk_payments_purchase_order")
  @@index([supplier_id], map: "supplier_id")
}

model documents {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  file_url    String   @db.VarChar(255)
  category    String   @db.VarChar(100)
  description String?  @db.Text
  uploaded_at DateTime @default(now()) @db.Timestamp(0)
}

model outlet_categories {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)
}

model allowed_ips {
  id          Int      @id @default(autoincrement())
  ip_address  String   @unique(map: "uk_ip_address") @db.VarChar(45)
  description String?  @db.VarChar(255)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @default(now()) @db.Timestamp(0)

  @@index([is_active], map: "idx_is_active")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model attendance {
  id                      Int             @id @default(autoincrement())
  staff_id                Int
  date                    DateTime        @db.Date
  checkin_time            DateTime?       @db.DateTime(0)
  checkout_time           DateTime?       @db.DateTime(0)
  checkin_latitude        Decimal?        @db.Decimal(10, 8)
  checkin_longitude       Decimal?        @db.Decimal(11, 8)
  checkout_latitude       Decimal?        @db.Decimal(10, 8)
  checkout_longitude      Decimal?        @db.Decimal(11, 8)
  checkin_location        String?         @db.VarChar(255)
  checkout_location       String?         @db.VarChar(255)
  checkin_ip              String?         @db.VarChar(45)
  checkout_ip             String?         @db.VarChar(45)
  status                  Int             @default(1)
  type                    attendance_type @default(regular)
  total_hours             Decimal?        @db.Decimal(5, 2)
  overtime_hours          Decimal         @default(0.00) @db.Decimal(5, 2)
  is_late                 Boolean         @default(false)
  late_minutes            Int             @default(0)
  device_info             String?         @db.Text
  timezone                String          @default("UTC") @db.VarChar(50)
  shift_start             DateTime?       @db.Time(0)
  shift_end               DateTime?       @db.Time(0)
  is_early_departure      Boolean         @default(false)
  early_departure_minutes Int             @default(0)
  notes                   String?         @db.Text
  created_at              DateTime        @default(now()) @db.Timestamp(0)
  updated_at              DateTime        @default(now()) @db.Timestamp(0)
  staff                   staff           @relation(fields: [staff_id], references: [id], onDelete: Cascade)

  @@unique([staff_id, date], map: "uk_staff_date")
  @@index([created_at], map: "idx_attendance_created_at")
  @@index([date], map: "idx_date")
  @@index([staff_id, date], map: "idx_staff_date_range")
  @@index([staff_id], map: "idx_staff_id")
  @@index([status], map: "idx_status")
  @@index([date, status], map: "idx_attendance_date_status")
  @@index([staff_id, status], map: "idx_attendance_staff_status")
  @@index([checkin_time], map: "idx_checkin_time")
  @@index([checkout_time], map: "idx_checkout_time")
}

model leave_balances {
  id                Int         @id @default(autoincrement())
  employee_id       Int
  leave_type_id     Int
  year              Int
  total_days        Int         @default(0)
  used_days         Int         @default(0)
  remaining_days    Int         @default(0)
  carried_over_days Int         @default(0)
  created_at        DateTime    @default(now()) @db.Timestamp(0)
  updated_at        DateTime    @default(now()) @db.Timestamp(0)
  staff             staff       @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  leave_types       leave_types @relation(fields: [leave_type_id], references: [id])

  @@unique([employee_id, leave_type_id, year], map: "uk_employee_leave_type_year")
  @@index([employee_id], map: "idx_employee_id")
  @@index([employee_id, year], map: "idx_employee_year")
  @@index([employee_id, leave_type_id], map: "idx_leave_balances_employee_type")
  @@index([year, leave_type_id], map: "idx_leave_balances_year_type")
  @@index([leave_type_id], map: "idx_leave_type_id")
  @@index([year], map: "idx_year")
}

model leave_requests {
  id               Int                   @id @default(autoincrement())
  employee_id      Int?
  leave_type_id    Int
  start_date       DateTime              @db.Date
  end_date         DateTime              @db.Date
  is_half_day      Boolean               @default(false)
  reason           String?               @db.VarChar(255)
  attachment_url   String?               @db.VarChar(255)
  status           leave_requests_status @default(pending)
  approved_by      Int?
  employee_type_id Int?
  salesrep         Int?
  notes            String?               @db.Text
  applied_at       DateTime              @default(now()) @db.DateTime(0)
  created_at       DateTime              @default(now()) @db.Timestamp(0)
  updated_at       DateTime              @default(now()) @db.Timestamp(0)
  users            users?                @relation(fields: [approved_by], references: [id])
  staff            staff?                @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  leave_types      leave_types           @relation(fields: [leave_type_id], references: [id])
  SalesRep         SalesRep?             @relation(fields: [salesrep], references: [id], onDelete: Cascade, map: "leave_requests_salesrep_id_fkey")

  @@unique([employee_id, leave_type_id, start_date, end_date], map: "uk_employee_leave_overlap")
  @@index([approved_by], map: "idx_approved_by")
  @@index([start_date, end_date], map: "idx_date_range")
  @@index([employee_id], map: "idx_employee_id")
  @@index([employee_id, status], map: "idx_employee_status")
  @@index([end_date], map: "idx_end_date")
  @@index([created_at], map: "idx_leave_requests_created_at")
  @@index([employee_id, status, start_date], map: "idx_leave_requests_employee_status_date")
  @@index([leave_type_id, status], map: "idx_leave_requests_type_status")
  @@index([leave_type_id], map: "idx_leave_type_id")
  @@index([start_date], map: "idx_start_date")
  @@index([status], map: "idx_status")
  @@index([salesrep], map: "leave_requests_salesrep_id_fkey")
}

model leave_types {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(100)
  description    String?          @db.Text
  default_days   Int              @default(0)
  is_active      Boolean          @default(true)
  created_at     DateTime         @default(now()) @db.Timestamp(0)
  updated_at     DateTime         @default(now()) @db.Timestamp(0)
  leave_balances leave_balances[]
  leave_requests leave_requests[]

  @@index([is_active], map: "idx_is_active")
  @@index([name], map: "idx_name")
}

model staff {
  id                                                                 Int                       @id @default(autoincrement())
  name                                                               String                    @db.VarChar(255)
  photo_url                                                          String                    @db.VarChar(255)
  empl_no                                                            String                    @db.VarChar(50)
  id_no                                                              String                    @db.VarChar(50)
  role                                                               String                    @db.VarChar(255)
  phone_number                                                       String?                   @db.VarChar(50)
  password                                                           String                    @db.VarChar(255)
  department                                                         String?                   @db.VarChar(100)
  business_email                                                     String?                   @db.VarChar(255)
  department_email                                                   String?                   @db.VarChar(255)
  salary                                                             Decimal?                  @db.Decimal(11, 2)
  employment_type                                                    String                    @db.VarChar(100)
  created_at                                                         DateTime                  @default(now()) @db.Timestamp(0)
  updated_at                                                         DateTime                  @default(now()) @db.Timestamp(0)
  is_active                                                          Int
  attendance                                                         attendance[]
  chat_messages                                                      chat_messages[]
  chat_room_members                                                  chat_room_members[]
  chat_rooms                                                         chat_rooms[]
  employee_contracts                                                 employee_contracts[]
  employee_documents                                                 employee_documents[]
  employee_warnings                                                  employee_warnings[]
  faulty_products_reports_faulty_products_reports_assigned_toTostaff faulty_products_reports[] @relation("faulty_products_reports_assigned_toTostaff")
  faulty_products_reports_faulty_products_reports_reported_byTostaff faulty_products_reports[] @relation("faulty_products_reports_reported_byTostaff")
  leave_balances                                                     leave_balances[]
  leave_requests                                                     leave_requests[]
  out_of_office_requests                                             out_of_office_requests[]
  payroll_history                                                    payroll_history[]
  termination_letters                                                termination_letters[]
  user_devices                                                       user_devices[]
  warning_letters                                                    warning_letters[]
}

model CategoryPriceOption {
  id          Int      @id @default(autoincrement())
  category_id Int
  label       String   @db.VarChar(100)
  value       Decimal  @db.Decimal(15, 2)
  value_tzs   Decimal  @db.Decimal(15, 2)
  value_ngn   Decimal  @db.Decimal(15, 2)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @default(now()) @db.Timestamp(0)
  Category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "CategoryPriceOption_ibfk_1")

  @@index([category_id], map: "category_id")
}

model account_ledger {
  id              Int                    @id @default(autoincrement())
  account_id      Int
  date            DateTime               @db.DateTime(0)
  description     String?                @db.VarChar(255)
  reference_type  String?                @db.VarChar(50)
  reference_id    Int?
  debit           Decimal?               @default(0.00) @db.Decimal(15, 2)
  credit          Decimal?               @default(0.00) @db.Decimal(15, 2)
  running_balance Decimal?               @default(0.00) @db.Decimal(15, 2)
  status          account_ledger_status? @default(in_pay)
  created_at      DateTime               @default(now()) @db.Timestamp(0)

  @@index([account_id], map: "account_id")
}

model account_types {
  id               Int      @id @default(autoincrement())
  account_type     String   @db.VarChar(100)
  account_category Int
  created_at       DateTime @default(now()) @db.Timestamp(0)
}

model asset_types {
  id   Int    @id @default(autoincrement())
  name String @unique(map: "name") @db.VarChar(100)
}

model assets {
  id                 Int                @id @default(autoincrement())
  account_id         Int
  name               String             @db.VarChar(255)
  purchase_date      DateTime           @db.Date
  purchase_value     Decimal            @db.Decimal(15, 2)
  description        String?            @db.Text
  created_at         DateTime           @default(now()) @db.Timestamp(0)
  updated_at         DateTime           @default(now()) @db.Timestamp(0)
  chart_of_accounts1 chart_of_accounts1 @relation(fields: [account_id], references: [id], onUpdate: Restrict, map: "assets_ibfk_1")

  @@index([account_id], map: "account_id")
}

model chart_of_accounts {
  id                Int               @id @default(autoincrement())
  account_name      String            @db.VarChar(100)
  account_code      String            @db.VarChar(20)
  account_type      Int
  parent_account_id Int
  description       String?           @db.Text
  created_at        DateTime          @default(now()) @db.Timestamp(0)
  updated_at        DateTime          @default(now()) @db.Timestamp(0)
  is_active         Int
  client_payments   client_payments[]
}

model chart_of_accounts1 {
  id                       Int                             @id @default(autoincrement())
  account_code             String                          @unique(map: "account_code") @db.VarChar(20)
  account_name             String                          @db.VarChar(100)
  account_type             chart_of_accounts1_account_type
  parent_account_id        Int?
  description              String?                         @db.Text
  is_active                Boolean?                        @default(true)
  created_at               DateTime                        @default(now()) @db.Timestamp(0)
  updated_at               DateTime                        @default(now()) @db.Timestamp(0)
  assets                   assets[]
  chart_of_accounts1       chart_of_accounts1?             @relation("chart_of_accounts1Tochart_of_accounts1", fields: [parent_account_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "chart_of_accounts1_ibfk_1")
  other_chart_of_accounts1 chart_of_accounts1[]            @relation("chart_of_accounts1Tochart_of_accounts1")

  @@index([parent_account_id], map: "parent_account_id")
}

model chat_messages {
  id         Int        @id @default(autoincrement())
  room_id    Int
  sender_id  Int
  message    String     @db.Text
  sent_at    DateTime   @default(now()) @db.Timestamp(0)
  chat_rooms chat_rooms @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "chat_messages_ibfk_1")
  staff      staff      @relation(fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "chat_messages_ibfk_2")

  @@index([room_id], map: "room_id")
  @@index([sender_id], map: "sender_id")
}

model chat_room_members {
  id         Int        @id @default(autoincrement())
  room_id    Int
  staff_id   Int
  joined_at  DateTime   @default(now()) @db.Timestamp(0)
  chat_rooms chat_rooms @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "chat_room_members_ibfk_1")
  staff      staff      @relation(fields: [staff_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "chat_room_members_ibfk_2")

  @@index([room_id], map: "room_id")
  @@index([staff_id], map: "staff_id")
}

model chat_rooms {
  id                Int                 @id @default(autoincrement())
  name              String?             @db.VarChar(255)
  is_group          Boolean?            @default(false)
  created_by        Int
  created_at        DateTime            @default(now()) @db.Timestamp(0)
  chat_messages     chat_messages[]
  chat_room_members chat_room_members[]
  staff             staff               @relation(fields: [created_by], references: [id], onUpdate: Restrict, map: "chat_rooms_ibfk_1")

  @@index([created_by], map: "created_by")
}

model client_ledger {
  id              Int      @id @default(autoincrement())
  client_id       Int
  date            DateTime @db.Date
  description     String   @db.Text
  reference_type  String   @db.VarChar(20)
  reference_id    Int
  debit           Decimal? @default(0.00) @db.Decimal(15, 2)
  credit          Decimal? @default(0.00) @db.Decimal(15, 2)
  running_balance Decimal  @db.Decimal(15, 2)
  created_at      DateTime @default(now()) @db.Timestamp(0)
  Clients         Clients  @relation(fields: [client_id], references: [id], onUpdate: Restrict, map: "fk_client_ledger_client")

  @@index([client_id], map: "fk_client_ledger_client")
}

model client_payments {
  id                Int                @id @default(autoincrement())
  customer_id       Int
  invoice_id        Int?
  amount            Decimal            @db.Decimal(15, 2)
  account_id        Int?
  reference         String?            @db.VarChar(255)
  status            String?            @db.VarChar(50)
  payment_date      DateTime           @default(now()) @db.DateTime(0)
  created_at        DateTime           @default(now()) @db.DateTime(0)
  updated_at        DateTime           @default(now()) @db.DateTime(0)
  chart_of_accounts chart_of_accounts? @relation(fields: [account_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_client_payments_account")

  @@index([account_id], map: "fk_client_payments_account")
}

model customers {
  id             Int      @id @default(autoincrement())
  customer_code  String   @unique(map: "customer_code") @db.VarChar(20)
  company_name   String   @db.VarChar(100)
  contact_person String?  @db.VarChar(100)
  email          String?  @db.VarChar(100)
  phone          String?  @db.VarChar(20)
  address        String?  @db.Text
  tax_id         String?  @db.VarChar(50)
  payment_terms  Int?     @default(30)
  credit_limit   Decimal? @default(0.00) @db.Decimal(15, 2)
  is_active      Boolean? @default(true)
  created_at     DateTime @default(now()) @db.Timestamp(0)
  updated_at     DateTime @default(now()) @db.Timestamp(0)
  country_id     Int?
  region_id      Int?
  route_id       Int?
  Country        Country? @relation(fields: [country_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "customers_ibfk_1")
  Regions        Regions? @relation(fields: [region_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "customers_ibfk_2")
  routes         routes?  @relation(fields: [route_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "customers_ibfk_3")

  @@index([country_id], map: "country_id")
  @@index([region_id], map: "region_id")
  @@index([route_id], map: "route_id")
}

model distributors_targets {
  id                  Int      @id @default(autoincrement())
  sales_rep_id        Int
  vapes_targets       Int?     @default(0)
  pouches_targets     Int?     @default(0)
  new_outlets_targets Int?     @default(0)
  target_month        String   @db.VarChar(7)
  created_at          DateTime @default(now()) @db.Timestamp(0)
  start_date          DateTime @db.Date
  end_date            DateTime @db.Date
  SalesRep            SalesRep @relation(fields: [sales_rep_id], references: [id], onUpdate: Restrict, map: "distributors_targets_ibfk_1")

  @@index([sales_rep_id], map: "sales_rep_id")
}

model employee_contracts {
  id                       Int                  @id @default(autoincrement())
  staff_id                 Int
  file_name                String               @db.VarChar(255)
  file_url                 String               @db.VarChar(500)
  start_date               DateTime             @db.Date
  end_date                 DateTime             @db.Date
  uploaded_at              DateTime             @default(now()) @db.Timestamp(0)
  renewed_from             Int?
  staff                    staff                @relation(fields: [staff_id], references: [id], onUpdate: Restrict, map: "employee_contracts_ibfk_1")
  employee_contracts       employee_contracts?  @relation("employee_contractsToemployee_contracts", fields: [renewed_from], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "employee_contracts_ibfk_2")
  other_employee_contracts employee_contracts[] @relation("employee_contractsToemployee_contracts")

  @@index([renewed_from], map: "renewed_from")
  @@index([staff_id], map: "staff_id")
}

model employee_documents {
  id          Int      @id @default(autoincrement())
  staff_id    Int
  file_name   String   @db.VarChar(255)
  file_url    String   @db.VarChar(255)
  uploaded_at DateTime @default(now()) @db.Timestamp(0)
  description String?  @db.VarChar(255)
  staff       staff    @relation(fields: [staff_id], references: [id], onUpdate: Restrict, map: "employee_documents_ibfk_1")

  @@index([staff_id], map: "staff_id")
}

model employee_warnings {
  id        Int      @id @default(autoincrement())
  staff_id  Int
  message   String   @db.Text
  issued_by String?  @db.VarChar(100)
  issued_at DateTime @default(now()) @db.Timestamp(0)
  staff     staff    @relation(fields: [staff_id], references: [id], onUpdate: Restrict, map: "employee_warnings_ibfk_1")

  @@index([staff_id], map: "staff_id")
}

model hr_calendar_tasks {
  id              Int                                @id @default(autoincrement())
  date            DateTime                           @db.Date
  title           String                             @default("") @db.VarChar(255)
  description     String?                            @db.Text
  status          hr_calendar_tasks_status?          @default(Pending)
  assigned_to     String?                            @db.VarChar(100)
  text            String                             @db.VarChar(255)
  recurrence_type hr_calendar_tasks_recurrence_type? @default(none)
  recurrence_end  DateTime?                          @db.Date
  created_at      DateTime                           @default(now()) @db.Timestamp(0)
  updated_at      DateTime                           @default(now()) @db.Timestamp(0)
}

model inventory_receipts {
  id                Int             @id @default(autoincrement())
  purchase_order_id Int
  product_id        Int
  store_id          Int
  received_quantity Int
  received_at       DateTime        @default(now()) @db.Timestamp(0)
  received_by       Int             @default(1)
  unit_cost         Decimal         @default(0.00) @db.Decimal(10, 2)
  total_cost        Decimal         @default(0.00) @db.Decimal(15, 2)
  notes             String?         @db.Text
  users             users           @relation(fields: [received_by], references: [id], onUpdate: Restrict, map: "fk_inventory_receipts_received_by")
  purchase_orders   purchase_orders @relation(fields: [purchase_order_id], references: [id], onUpdate: Restrict, map: "inventory_receipts_ibfk_1")
  products          products        @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "inventory_receipts_ibfk_2")
  stores            stores          @relation(fields: [store_id], references: [id], onUpdate: Restrict, map: "inventory_receipts_ibfk_3")

  @@index([received_by], map: "fk_inventory_receipts_received_by")
  @@index([product_id], map: "product_id")
  @@index([purchase_order_id], map: "purchase_order_id")
  @@index([store_id], map: "store_id")
}

model inventory_transactions {
  id            Int      @id @default(autoincrement())
  product_id    Int
  reference     String?  @db.VarChar(255)
  amount_in     Decimal? @default(0.00) @db.Decimal(12, 2)
  amount_out    Decimal? @default(0.00) @db.Decimal(12, 2)
  balance       Decimal? @default(0.00) @db.Decimal(12, 2)
  date_received DateTime @db.DateTime(0)
  store_id      Int
  unit_cost     Decimal  @db.Decimal(11, 2)
  total_cost    Decimal  @db.Decimal(11, 2)
  staff_id      Int
  created_at    DateTime @default(now()) @db.Timestamp(0)
  products      products @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "inventory_transactions_ibfk_1")
  stores        stores   @relation(fields: [store_id], references: [id], onUpdate: Restrict, map: "inventory_transactions_ibfk_2")
  users         users    @relation(fields: [staff_id], references: [id], onUpdate: Restrict, map: "inventory_transactions_ibfk_3")

  @@index([product_id], map: "product_id")
  @@index([staff_id], map: "staff_id")
  @@index([store_id], map: "store_id")
}

model inventory_transfers {
  id                                               Int      @id @default(autoincrement())
  from_store_id                                    Int
  to_store_id                                      Int
  product_id                                       Int
  quantity                                         Decimal  @db.Decimal(12, 2)
  transfer_date                                    DateTime @db.DateTime(0)
  staff_id                                         Int
  reference                                        String?  @db.VarChar(255)
  notes                                            String?  @db.Text
  created_at                                       DateTime @default(now()) @db.Timestamp(0)
  stores_inventory_transfers_from_store_idTostores stores   @relation("inventory_transfers_from_store_idTostores", fields: [from_store_id], references: [id], onUpdate: Restrict, map: "inventory_transfers_ibfk_1")
  stores_inventory_transfers_to_store_idTostores   stores   @relation("inventory_transfers_to_store_idTostores", fields: [to_store_id], references: [id], onUpdate: Restrict, map: "inventory_transfers_ibfk_2")
  products                                         products @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "inventory_transfers_ibfk_3")
  users                                            users    @relation(fields: [staff_id], references: [id], onUpdate: Restrict, map: "inventory_transfers_ibfk_4")

  @@index([from_store_id], map: "from_store_id")
  @@index([product_id], map: "product_id")
  @@index([staff_id], map: "staff_id")
  @@index([to_store_id], map: "to_store_id")
}

model journal_entries {
  id                  Int                     @id @default(autoincrement())
  entry_number        String                  @unique(map: "entry_number") @db.VarChar(20)
  entry_date          DateTime                @db.Date
  reference           String?                 @db.VarChar(100)
  description         String?                 @db.Text
  total_debit         Decimal?                @default(0.00) @db.Decimal(15, 2)
  total_credit        Decimal?                @default(0.00) @db.Decimal(15, 2)
  status              journal_entries_status? @default(draft)
  created_by          Int
  created_at          DateTime                @default(now()) @db.Timestamp(0)
  updated_at          DateTime                @default(now()) @db.Timestamp(0)
  users               users                   @relation(fields: [created_by], references: [id], onUpdate: Restrict, map: "journal_entries_ibfk_1")
  journal_entry_lines journal_entry_lines[]

  @@index([created_by], map: "created_by")
}

model journal_entry_lines {
  id               Int             @id @default(autoincrement())
  journal_entry_id Int
  account_id       Int
  debit_amount     Decimal?        @default(0.00) @db.Decimal(15, 2)
  credit_amount    Decimal?        @default(0.00) @db.Decimal(15, 2)
  description      String?         @db.Text
  journal_entries  journal_entries @relation(fields: [journal_entry_id], references: [id], onUpdate: Restrict, map: "journal_entry_lines_ibfk_1")

  @@index([account_id], map: "account_id")
  @@index([journal_entry_id], map: "journal_entry_id")
}

model key_account_targets {
  id                  Int      @id @default(autoincrement())
  sales_rep_id        Int
  vapes_targets       Int?     @default(0)
  pouches_targets     Int?     @default(0)
  new_outlets_targets Int?     @default(0)
  created_at          DateTime @default(now()) @db.Timestamp(0)
  target_month        String   @db.VarChar(7)
  start_date          DateTime @db.Date
  end_date            DateTime @db.Date
  SalesRep            SalesRep @relation(fields: [sales_rep_id], references: [id], onUpdate: Restrict, map: "key_account_targets_ibfk_1")

  @@index([sales_rep_id], map: "sales_rep_id")
}

model my_order {
  id                     Int              @id @default(autoincrement())
  so_number              String           @unique(map: "so_number") @db.VarChar(20)
  client_id              Int
  order_date             DateTime         @db.Date
  expected_delivery_date DateTime?        @db.Date
  subtotal               Decimal?         @default(0.00) @db.Decimal(15, 2)
  tax_amount             Decimal?         @default(0.00) @db.Decimal(15, 2)
  total_amount           Decimal?         @default(0.00) @db.Decimal(15, 2)
  net_price              Decimal          @db.Decimal(11, 2)
  notes                  String?          @db.Text
  created_by             Int
  created_at             DateTime         @default(now()) @db.Timestamp(0)
  updated_at             DateTime         @default(now()) @db.Timestamp(0)
  rider_id               Int
  assigned_at            DateTime         @default(dbgenerated("('0000-00-00 00:00:00')")) @db.Timestamp(0)
  status                 my_order_status? @default(draft)
  my_status              Int              @db.TinyInt

  @@index([created_by], map: "created_by")
  @@index([client_id], map: "fk_sales_orders_client")
}

model my_order_items {
  id               Int     @id @default(autoincrement())
  my_order_id      Int
  product_id       Int
  quantity         Int
  unit_price       Decimal @db.Decimal(10, 2)
  tax_amount       Decimal @db.Decimal(11, 2)
  total_price      Decimal @db.Decimal(15, 2)
  net_price        Decimal @db.Decimal(11, 2)
  shipped_quantity Int?    @default(0)

  @@index([product_id], map: "product_id")
  @@index([my_order_id], map: "sales_order_id")
}

model notices {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  content    String   @db.Text
  country_id Int
  created_at DateTime @default(now()) @db.Timestamp(0)
  status     Int      @default(0) @db.TinyInt
}

model out_of_office_requests {
  id         Int                            @id @default(autoincrement())
  staff_id   Int
  date       DateTime                       @db.Date
  reason     String                         @db.VarChar(255)
  comment    String?                        @db.Text
  status     out_of_office_requests_status? @default(pending)
  created_at DateTime                       @default(now()) @db.Timestamp(0)
  updated_at DateTime                       @default(now()) @db.Timestamp(0)
  staff      staff                          @relation(fields: [staff_id], references: [id], onUpdate: Restrict, map: "out_of_office_requests_ibfk_1")

  @@index([staff_id], map: "staff_id")
}

model payroll_history {
  id         Int      @id @default(autoincrement())
  staff_id   Int
  pay_date   DateTime @db.Date
  amount     Decimal  @db.Decimal(12, 2)
  notes      String?  @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
  staff      staff    @relation(fields: [staff_id], references: [id], onUpdate: Restrict, map: "payroll_history_ibfk_1")

  @@index([staff_id], map: "staff_id")
}

model products {
  id                     Int                      @id @default(autoincrement())
  product_code           String                   @unique(map: "product_code") @db.VarChar(20)
  product_name           String                   @db.VarChar(100)
  description            String?                  @db.Text
  category_id            Int
  category               String?                  @db.VarChar(50)
  unit_of_measure        String?                  @default("PCS") @db.VarChar(20)
  cost_price             Decimal?                 @default(0.00) @db.Decimal(10, 2)
  selling_price          Decimal?                 @default(0.00) @db.Decimal(10, 2)
  tax_type               products_tax_type?       @default(vat_16)
  reorder_level          Int?                     @default(0)
  current_stock          Int?                     @default(0)
  is_active              Boolean?                 @default(true)
  created_at             DateTime                 @default(now()) @db.Timestamp(0)
  updated_at             DateTime                 @default(now()) @db.Timestamp(0)
  image_url              String                   @db.VarChar(200)
  UpliftSaleItem         UpliftSaleItem[]
  faulty_products_items  faulty_products_items[]
  inventory_receipts     inventory_receipts[]
  inventory_transactions inventory_transactions[]
  inventory_transfers    inventory_transfers[]
  purchase_order_items   purchase_order_items[]
  sales_order_items      sales_order_items[]
  stock_take_items       stock_take_items[]
  store_inventory        store_inventory[]
}

model purchase_order_items {
  id                Int             @id @default(autoincrement())
  purchase_order_id Int
  product_id        Int
  quantity          Int
  unit_price        Decimal         @db.Decimal(10, 2)
  total_price       Decimal         @db.Decimal(15, 2)
  received_quantity Int?            @default(0)
  purchase_orders   purchase_orders @relation(fields: [purchase_order_id], references: [id], onUpdate: Restrict, map: "purchase_order_items_ibfk_1")
  products          products        @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "purchase_order_items_ibfk_2")

  @@index([product_id], map: "product_id")
  @@index([purchase_order_id], map: "purchase_order_id")
}

model purchase_orders {
  id                     Int                     @id @default(autoincrement())
  po_number              String                  @unique(map: "po_number") @db.VarChar(20)
  supplier_id            Int
  order_date             DateTime                @db.Date
  expected_delivery_date DateTime?               @db.Date
  status                 purchase_orders_status? @default(draft)
  subtotal               Decimal?                @default(0.00) @db.Decimal(15, 2)
  tax_amount             Decimal?                @default(0.00) @db.Decimal(15, 2)
  total_amount           Decimal?                @default(0.00) @db.Decimal(15, 2)
  notes                  String?                 @db.Text
  created_by             Int
  created_at             DateTime                @default(now()) @db.Timestamp(0)
  updated_at             DateTime                @default(now()) @db.Timestamp(0)
  inventory_receipts     inventory_receipts[]
  payments               payments[]
  purchase_order_items   purchase_order_items[]
  suppliers              suppliers               @relation(fields: [supplier_id], references: [id], onUpdate: Restrict, map: "purchase_orders_ibfk_1")
  users                  users                   @relation(fields: [created_by], references: [id], onUpdate: Restrict, map: "purchase_orders_ibfk_2")

  @@index([created_by], map: "created_by")
  @@index([supplier_id], map: "supplier_id")
}

model receipts {
  id               Int                     @id @default(autoincrement())
  receipt_number   String                  @unique(map: "receipt_number") @db.VarChar(20)
  client_id        Int
  sales_order_id   Int?
  receipt_date     DateTime                @db.Date
  payment_method   receipts_payment_method
  reference_number String?                 @db.VarChar(50)
  amount           Decimal                 @db.Decimal(15, 2)
  notes            String?                 @db.Text
  created_by       Int
  created_at       DateTime                @default(now()) @db.Timestamp(0)
  updated_at       DateTime                @default(now()) @db.Timestamp(0)
  status           receipts_status?        @default(draft)
  account_id       Int?
  reference        String?                 @db.VarChar(100)
  Clients          Clients                 @relation(fields: [client_id], references: [id], onUpdate: Restrict, map: "fk_receipts_client")
  sales_orders     sales_orders?           @relation(fields: [sales_order_id], references: [id], onUpdate: Restrict, map: "fk_receipts_sales_order")
  users            users                   @relation(fields: [created_by], references: [id], onUpdate: Restrict, map: "receipts_ibfk_2")

  @@index([created_by], map: "created_by")
  @@index([client_id], map: "fk_receipts_client")
  @@index([sales_order_id], map: "fk_receipts_sales_order")
}

model retail_targets {
  id                  Int      @id @default(autoincrement())
  sales_rep_id        Int
  vapes_targets       Int?     @default(0)
  pouches_targets     Int?     @default(0)
  new_outlets_targets Int?     @default(0)
  target_month        String   @db.VarChar(7)
  created_at          DateTime @default(now()) @db.Timestamp(0)
  start_date          DateTime @db.Date
  end_date            DateTime @db.Date
  SalesRep            SalesRep @relation(fields: [sales_rep_id], references: [id], onUpdate: Restrict, map: "retail_targets_ibfk_1")

  @@index([sales_rep_id], map: "sales_rep_id")
}

model sales_order_items {
  id               Int                         @id @default(autoincrement())
  sales_order_id   Int
  product_id       Int
  quantity         Int
  unit_price       Decimal                     @db.Decimal(10, 2)
  tax_amount       Decimal                     @db.Decimal(11, 2)
  total_price      Decimal                     @db.Decimal(15, 2)
  tax_type         sales_order_items_tax_type? @default(vat_16)
  net_price        Decimal                     @db.Decimal(11, 2)
  shipped_quantity Int?                        @default(0)
  sales_orders     sales_orders                @relation(fields: [sales_order_id], references: [id], onUpdate: Restrict, map: "sales_order_items_ibfk_1")
  products         products                    @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "sales_order_items_ibfk_2")

  @@index([product_id], map: "product_id")
  @@index([sales_order_id], map: "sales_order_id")
}

model sales_orders {
  id                     Int                  @id @default(autoincrement())
  so_number              String               @unique(map: "so_number") @db.VarChar(20)
  client_id              Int
  order_date             DateTime             @db.Date
  expected_delivery_date DateTime?            @db.Date
  subtotal               Decimal?             @default(0.00) @db.Decimal(15, 2)
  tax_amount             Decimal?             @default(0.00) @db.Decimal(15, 2)
  total_amount           Decimal?             @default(0.00) @db.Decimal(15, 2)
  net_price              Decimal              @db.Decimal(11, 2)
  notes                  String?              @db.Text
  created_by             Int?
  salesrep               Int?
  created_at             DateTime             @default(now()) @db.Timestamp(0)
  updated_at             DateTime             @default(now()) @db.Timestamp(0)
  rider_id               Int?
  assigned_at            DateTime?            @default(dbgenerated("('0000-00-00 00:00:00')")) @db.Timestamp(0)
  status                 sales_orders_status? @default(draft)
  my_status              Int                  @db.TinyInt
  receipts               receipts[]
  sales_order_items      sales_order_items[]
  Clients                Clients              @relation(fields: [client_id], references: [id], onUpdate: Restrict, map: "fk_sales_orders_client")
  users                  users?               @relation(fields: [created_by], references: [id], onUpdate: Restrict, map: "sales_orders_ibfk_2")
  SalesRep               SalesRep?            @relation(fields: [salesrep], references: [id], onDelete: Cascade, map: "salesrep_rel")

  @@index([created_by], map: "created_by")
  @@index([client_id], map: "fk_sales_orders_client")
  @@index([salesrep], map: "salesrep_rel")
}

model sales_rep_manager_assignments {
  id           Int      @id @default(autoincrement())
  sales_rep_id Int
  manager_id   Int
  manager_type String   @db.VarChar(50)
  SalesRep     SalesRep @relation(fields: [sales_rep_id], references: [id], onUpdate: Restrict, map: "sales_rep_manager_assignments_ibfk_1")
  managers     Manager  @relation(fields: [manager_id], references: [id], onUpdate: Restrict, map: "sales_rep_manager_assignments_ibfk_2")

  @@unique([sales_rep_id, manager_type], map: "unique_assignment")
  @@index([manager_id], map: "manager_id")
}

model sales_rep_managers {
  id           Int      @id @default(autoincrement())
  sales_rep_id Int
  manager_id   Int
  manager_type String?  @db.VarChar(50)
  SalesRep     SalesRep @relation(fields: [sales_rep_id], references: [id], onUpdate: Restrict, map: "sales_rep_managers_ibfk_1")
  managers     Manager  @relation(fields: [manager_id], references: [id], onUpdate: Restrict, map: "sales_rep_managers_ibfk_2")

  @@index([manager_id], map: "manager_id")
  @@index([sales_rep_id], map: "sales_rep_id")
}

model stock_take_items {
  id               Int         @id @default(autoincrement())
  stock_take_id    Int
  product_id       Int
  system_quantity  Int
  counted_quantity Int
  difference       Int
  stock_takes      stock_takes @relation(fields: [stock_take_id], references: [id], onUpdate: Restrict, map: "stock_take_items_ibfk_1")
  products         products    @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "stock_take_items_ibfk_2")

  @@index([product_id], map: "product_id")
  @@index([stock_take_id], map: "stock_take_id")
}

model stock_takes {
  id               Int                @id @default(autoincrement())
  store_id         Int
  staff_id         Int
  take_date        DateTime           @db.Date
  notes            String?            @db.Text
  created_at       DateTime           @default(now()) @db.Timestamp(0)
  stock_take_items stock_take_items[]
  stores           stores             @relation(fields: [store_id], references: [id], onUpdate: Restrict, map: "stock_takes_ibfk_1")
  users            users              @relation(fields: [staff_id], references: [id], onUpdate: Restrict, map: "stock_takes_ibfk_2")

  @@index([staff_id], map: "staff_id")
  @@index([store_id], map: "store_id")
}

model store_inventory {
  id         Int      @id @default(autoincrement())
  store_id   Int
  product_id Int
  quantity   Int?     @default(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  stores     stores   @relation(fields: [store_id], references: [id], onUpdate: Restrict, map: "store_inventory_ibfk_1")
  products   products @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "store_inventory_ibfk_2")

  @@unique([store_id, product_id], map: "store_id")
  @@index([product_id], map: "product_id")
}

model stores {
  id                                                            Int                       @id @default(autoincrement())
  store_code                                                    String                    @unique(map: "store_code") @db.VarChar(20)
  store_name                                                    String                    @db.VarChar(100)
  address                                                       String?                   @db.Text
  country_id                                                    Int
  is_active                                                     Boolean?                  @default(true)
  created_at                                                    DateTime                  @default(now()) @db.Timestamp(0)
  faulty_products_reports                                       faulty_products_reports[]
  inventory_receipts                                            inventory_receipts[]
  inventory_transactions                                        inventory_transactions[]
  inventory_transfers_inventory_transfers_from_store_idTostores inventory_transfers[]     @relation("inventory_transfers_from_store_idTostores")
  inventory_transfers_inventory_transfers_to_store_idTostores   inventory_transfers[]     @relation("inventory_transfers_to_store_idTostores")
  stock_takes                                                   stock_takes[]
  store_inventory                                               store_inventory[]
  Country                                                       Country                   @relation(fields: [country_id], references: [id], onDelete: Cascade, map: "country_re")

  @@index([country_id], map: "country_re")
}

model supplier_ledger {
  id              Int       @id @default(autoincrement())
  supplier_id     Int
  date            DateTime  @db.DateTime(0)
  description     String?   @db.VarChar(255)
  reference_type  String?   @db.VarChar(50)
  reference_id    Int?
  debit           Decimal?  @default(0.00) @db.Decimal(15, 2)
  credit          Decimal?  @default(0.00) @db.Decimal(15, 2)
  running_balance Decimal?  @default(0.00) @db.Decimal(15, 2)
  created_at      DateTime  @default(now()) @db.Timestamp(0)
  suppliers       suppliers @relation(fields: [supplier_id], references: [id], onUpdate: Restrict, map: "supplier_ledger_ibfk_1")

  @@index([supplier_id], map: "supplier_id")
}

model suppliers {
  id              Int               @id @default(autoincrement())
  supplier_code   String            @unique(map: "supplier_code") @db.VarChar(20)
  company_name    String            @db.VarChar(100)
  contact_person  String?           @db.VarChar(100)
  email           String?           @db.VarChar(100)
  phone           String?           @db.VarChar(20)
  address         String?           @db.Text
  tax_id          String?           @db.VarChar(50)
  payment_terms   Int?              @default(30)
  credit_limit    Decimal?          @default(0.00) @db.Decimal(15, 2)
  is_active       Boolean?          @default(true)
  created_at      DateTime          @default(now()) @db.Timestamp(0)
  updated_at      DateTime          @default(now()) @db.Timestamp(0)
  my_assets       my_assets[]
  my_receipts     my_receipts[]
  payments        payments[]
  purchase_orders purchase_orders[]
  supplier_ledger supplier_ledger[]
}

model termination_letters {
  id               Int      @id @default(autoincrement())
  staff_id         Int
  file_name        String   @db.VarChar(255)
  file_url         String   @db.VarChar(500)
  termination_date DateTime @db.Date
  uploaded_at      DateTime @default(now()) @db.Timestamp(0)
  staff            staff    @relation(fields: [staff_id], references: [id], onUpdate: Restrict, map: "termination_letters_ibfk_1")

  @@index([staff_id], map: "staff_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_devices {
  id           Int                      @id @default(autoincrement())
  user_id      Int
  device_id    String                   @db.VarChar(100)
  device_name  String?                  @db.VarChar(100)
  device_type  user_devices_device_type
  device_model String?                  @db.VarChar(100)
  os_version   String?                  @db.VarChar(50)
  app_version  String?                  @db.VarChar(20)
  ip_address   String?                  @db.VarChar(45)
  is_active    Boolean?                 @default(false)
  last_used    DateTime?                @db.Timestamp(0)
  created_at   DateTime                 @default(now()) @db.Timestamp(0)
  updated_at   DateTime                 @default(now()) @db.Timestamp(0)
  staff        staff                    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_devices_ibfk_1")

  @@unique([user_id, device_id], map: "uk_user_device")
  @@index([device_id], map: "idx_device_id")
  @@index([ip_address], map: "idx_ip_address")
  @@index([user_id, is_active], map: "idx_user_active")
}

model warning_letters {
  id           Int      @id @default(autoincrement())
  staff_id     Int
  file_name    String   @db.VarChar(255)
  file_url     String   @db.VarChar(500)
  warning_date DateTime @db.Date
  warning_type String   @db.VarChar(50)
  description  String?  @db.Text
  uploaded_at  DateTime @default(now()) @db.Timestamp(0)
  staff        staff    @relation(fields: [staff_id], references: [id], onUpdate: Restrict, map: "warning_letters_ibfk_1")

  @@index([staff_id], map: "staff_id")
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String    @db.VarChar(255)
  salesRepId  Int
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  blacklisted Boolean   @default(false)
  lastUsedAt  DateTime?
  tokenType   String    @default("access") @db.VarChar(10)

  @@index([salesRepId], map: "Token_userId_fkey")
  @@index([expiresAt, blacklisted], map: "idx_token_cleanup")
  @@index([salesRepId, tokenType, blacklisted, expiresAt], map: "idx_token_lookup")
  @@index([token(length: 64)], map: "idx_token_value")
}

model my_receipts {
  id                Int       @id @default(autoincrement())
  supplier_id       Int
  comment           String?   @db.Text
  receipt_date      DateTime  @db.Date
  document_path     String    @db.VarChar(500)
  original_filename String    @db.VarChar(255)
  file_size         Int
  created_by        Int
  created_at        DateTime  @default(now()) @db.Timestamp(0)
  updated_at        DateTime  @default(now()) @db.Timestamp(0)
  suppliers         suppliers @relation(fields: [supplier_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "my_receipts_ibfk_1")
  users             users     @relation(fields: [created_by], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "my_receipts_ibfk_2")

  @@index([created_by], map: "created_by")
  @@index([supplier_id], map: "supplier_id")
}

model my_assets {
  id            Int       @id @default(autoincrement())
  asset_code    String    @unique(map: "asset_code") @db.VarChar(50)
  asset_name    String    @db.VarChar(255)
  asset_type    String    @db.VarChar(100)
  purchase_date DateTime  @db.Date
  location      String    @db.VarChar(255)
  supplier_id   Int
  price         Decimal   @db.Decimal(10, 2)
  quantity      Int       @default(1)
  document_url  String?   @db.Text
  created_at    DateTime  @default(now()) @db.Timestamp(0)
  updated_at    DateTime  @default(now()) @db.Timestamp(0)
  suppliers     suppliers @relation(fields: [supplier_id], references: [id], map: "my_assets_ibfk_1")

  @@index([asset_code], map: "idx_asset_code")
  @@index([asset_type], map: "idx_asset_type")
  @@index([location], map: "idx_location")
  @@index([purchase_date], map: "idx_purchase_date")
  @@index([supplier_id], map: "idx_supplier_id")
}

model faulty_products_items {
  id                      Int                     @id @default(autoincrement())
  report_id               Int
  product_id              Int
  quantity                Int                     @default(1)
  fault_comment           String                  @db.Text
  created_at              DateTime                @default(now()) @db.Timestamp(0)
  updated_at              DateTime                @default(now()) @db.Timestamp(0)
  faulty_products_reports faulty_products_reports @relation(fields: [report_id], references: [id], onDelete: Cascade, map: "faulty_products_items_ibfk_1")
  products                products                @relation(fields: [product_id], references: [id], map: "faulty_products_items_ibfk_2")

  @@index([product_id], map: "idx_product_id")
  @@index([report_id], map: "idx_report_id")
}

model faulty_products_reports {
  id                                               Int                             @id @default(autoincrement())
  store_id                                         Int
  reported_by                                      Int
  reported_date                                    DateTime                        @db.Date
  status                                           faulty_products_reports_status? @default(Reported)
  assigned_to                                      Int?
  resolution_notes                                 String?                         @db.Text
  document_url                                     String?                         @db.Text
  created_at                                       DateTime                        @default(now()) @db.Timestamp(0)
  updated_at                                       DateTime                        @default(now()) @db.Timestamp(0)
  faulty_products_items                            faulty_products_items[]
  stores                                           stores                          @relation(fields: [store_id], references: [id], map: "faulty_products_reports_ibfk_1")
  staff_faulty_products_reports_assigned_toTostaff staff?                          @relation("faulty_products_reports_assigned_toTostaff", fields: [assigned_to], references: [id], map: "fk_faulty_products_reports_assigned_to")
  staff_faulty_products_reports_reported_byTostaff staff                           @relation("faulty_products_reports_reported_byTostaff", fields: [reported_by], references: [id], map: "fk_faulty_products_reports_reported_by")

  @@index([assigned_to], map: "idx_assigned_to")
  @@index([reported_by], map: "idx_reported_by")
  @@index([reported_date], map: "idx_reported_date")
  @@index([status], map: "idx_status")
  @@index([store_id], map: "idx_store_id")
}

model tasks {
  id           Int       @id @default(autoincrement())
  title        String
  description  String    @db.Text
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  isCompleted  Boolean   @default(false)
  priority     String    @default("medium")
  status       String    @default("pending")
  salesRepId   Int
  assignedById Int?

  @@index([assignedById])
  @@index([salesRepId], map: "tasks_salesRepId_fkey")
}

model UpliftSale {
  id             Int              @id @default(autoincrement())
  clientId       Int
  userId         Int
  status         String           @default("pending")
  totalAmount    Float            @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  Clients        Clients          @relation(fields: [clientId], references: [id], onDelete: Cascade, map: "clients")
  SalesRep       SalesRep         @relation(fields: [userId], references: [id], onDelete: Cascade, map: "salesrep")
  UpliftSaleItem UpliftSaleItem[]

  @@index([clientId], map: "UpliftSale_clientId_fkey")
  @@index([userId], map: "UpliftSale_userId_fkey")
}

model UpliftSaleItem {
  id           Int        @id @default(autoincrement())
  upliftSaleId Int
  productId    Int
  quantity     Int
  unitPrice    Float
  total        Float
  createdAt    DateTime   @default(now())
  products     products   @relation(fields: [productId], references: [id], onDelete: Cascade, map: "productid")
  UpliftSale   UpliftSale @relation(fields: [upliftSaleId], references: [id], onDelete: Cascade, map: "uplift_order")

  @@index([productId], map: "UpliftSaleItem_productId_fkey")
  @@index([upliftSaleId], map: "UpliftSaleItem_upliftSaleId_fkey")
}

model JourneyPlanss {
  id                 Int       @id @default(autoincrement())
  date               DateTime
  time               String
  userId             Int?
  clientId           Int?
  status             Int       @default(0)
  checkInTime        DateTime?
  latitude           Float?
  longitude          Float?
  imageUrl           String?
  notes              String?
  checkoutLatitude   Float?
  checkoutLongitude  Float?
  checkoutTime       DateTime?
  showUpdateLocation Boolean   @default(true)
  routeId            Int?
  Clients            Clients?  @relation(fields: [clientId], references: [id], onDelete: Cascade, map: "client_id")
  SalesRep           SalesRep? @relation(fields: [userId], references: [id], onDelete: Cascade, map: "salesrep_id")

  @@index([clientId], map: "JourneyPlan_clientId_idx")
  @@index([routeId], map: "JourneyPlan_routeId_fkey")
  @@index([userId], map: "JourneyPlan_userId_idx")
}

model targets {
  id           Int      @id @default(autoincrement())
  salesRepId   Int
  targetType   String   @db.VarChar(50)
  targetValue  Int
  currentValue Int?     @default(0)
  targetMonth  String   @db.VarChar(7)
  startDate    DateTime @db.Date
  endDate      DateTime @db.Date
  status       String?  @default("pending") @db.VarChar(20)
  progress     Int?     @default(0)
  createdAt    DateTime @default(now()) @db.Timestamp(0)
  updatedAt    DateTime @default(now()) @db.Timestamp(0)
  SalesRep     SalesRep @relation(fields: [salesRepId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_targets_salesRep")

  @@index([salesRepId], map: "idx_salesRepId")
  @@index([status], map: "idx_status")
  @@index([targetMonth], map: "idx_targetMonth")
  @@index([targetType], map: "idx_targetType")
}

enum chart_of_accounts1_account_type {
  asset
  liability
  equity
  revenue
  expense
}

enum hr_calendar_tasks_status {
  Pending
  In_Progress @map("In Progress")
  Completed
}

enum managers_managerType {
  retail
  distribution
  key_account
}

enum user_devices_device_type {
  android
  ios
  web
}

enum purchase_orders_status {
  draft
  sent
  received
  cancelled
}

enum payments_payment_method {
  cash
  check
  bank_transfer
  credit_card
}

enum users_role {
  admin
  manager
  accountant
  user
  hr
  sales
}

enum receipts_payment_method {
  cash
  check
  bank_transfer
  credit_card
}

enum out_of_office_requests_status {
  pending
  approved
  declined
}

enum hr_calendar_tasks_recurrence_type {
  none
  daily
  weekly
  monthly
}

enum journal_entries_status {
  draft
  posted
  cancelled
}

enum leave_requests_status {
  pending
  approved
  rejected
  cancelled
}

enum account_ledger_status {
  in_pay    @map("in pay")
  confirmed
}

enum receipts_status {
  draft
  in_pay    @map("in pay")
  confirmed
  cancelled
}

enum payments_status {
  in_pay    @map("in pay")
  confirmed
}

enum attendance_type {
  regular
  overtime
  leave
}

enum my_order_status {
  draft
  confirmed
  shipped
  delivered
  cancelled
  in_payment @map("in payment")
  paid
}

enum sales_orders_status {
  draft
  confirmed
  shipped
  delivered
  cancelled
  in_payment @map("in payment")
  paid
}

enum faulty_products_reports_status {
  Reported
  Under_Investigation @map("Under Investigation")
  Being_Repaired      @map("Being Repaired")
  Repaired
  Replaced
  Disposed
  Closed
}

enum sales_order_items_tax_type {
  vat_16     @map("16%")
  zero_rated
  exempted
}

enum products_tax_type {
  vat_16     @map("16%")
  zero_rated
  exempted
}
